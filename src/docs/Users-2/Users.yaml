paths:
  /api/users/:
      get:
        sumary: Obtiene todos los usuarios
          tags: 
            - Users
          responses:
            "200":
              description: Los usuarios fueron obtenidos correctamente.
              content:
                applications/json:
                  schema:
                    type: array
                    items: 
                      $ref: '#/components/schema/User'
            "500":
              description: error interno del server, usualmente generado ppr una query defectuosa o un fallo con la base de datos.
       post:
        sumary: Crea un nuevo usuario
          tags: 
            - Users
          requestBody:
            required: true
            content: 
              application/json:
                schema:
                  $ref: '#/components/requestBodies/User'
          responses:
            "201":
              description: Los usuarios fueron obtenidos correctamente.
              

  /api/users/{uid}:
      get:
        sumary: Obtiene un usuario en base un uid
          tags: 
            - Users
          parameters:
            - name: uid
              in: path
              required: true
              description: El id del usuario que se desea solicitar
              schema:
                type: string
          responses:
            "200":
              description: El usuario fue obtenido correctamente.
              content:
                applications/json:
                  schema:
                    $ref: '#/components/schema/User'
      put:
        sumary: Se actualiza un usuario en base un uid
          tags: 
            - Users
          parameters:
          - name: uid
            in: path
            required: true
            description: El id del usuario que se desea actualizar
            schema:
              $type: string
          requestBody:
            required: true
            content:
              application/json:
                schema: 
                  $ref: '#/components/requestBodies/updateUser'    
      
components:
  schemas:
    User:
      type: object 
      properties:
        _id:
          type: string
          description: Id autogenerado por Mongo.
        first_name:
          type: string
          description: El nombre del usuario.
        last_name:
          type: string
          description: El apellido del usuario.
        email:
          type: string
          description:  El email del usuario,  este campo es unico y no puede repetirse.
        password:
          type: string
          description: La contraseña del usuario.
      expanle:
        _id: ObjectId(" asddefe45y")
        first_name: Sofia Belen
        last_name: Romero Rottela
        email: sofi.rom.rott@gmail.com
        password: $lsmfisdggrd

requestBodies:
  updateUser:
    content:
      application/json:
        schema:
          type: object
          properties:
              first_name:
                type: string
                description: El nombre del usuario.
              last_name:
                type: string
                description: El apellido del usuario.
              email:
                type: string
                description:  El email del usuario,  este campo es unico y no puede repetirse.
              password:
                type: string
                description: La contraseña del usuario.
        expanle:
          
          first_name: Sofia Belen
          last_name: Romero Rottela
          email: sofi.rom.rott@gmail.com
          password: sofi123